from manim import *
from numpy import ndarray
from src.edge import Edge
from src.vertex import Vertex

""" The graph_segments.py class includes all the elements needed to animate a flow network.
@author Silke Sofie Holme Bonnén & Rakul Maria Hjalmarsdóttir Tórgarð
"""

"""Creates a FlowGraph in form of a FlowSegment for each edge that the flow is being streamed through"""


class FlowGraph(Mobject):
    def __init__(self, edges: list[Edge], flow):
        super().__init__()
        for edge in edges:
            graph = FlowSegment(
                edge.start_vertex,
                edge.end_vertex,
                (edge.current_flow + flow),
                AS2700.B41_BLUEBELL,
            )
            # add the flow to the vertices and the edge
            edge.start_vertex.add_to_current_flow(flow)
            edge.end_vertex.add_to_current_flow(flow)
            edge.add_current_flow_towards(flow)
            self.add(graph)


class FlowSegment(Mobject):
    def __init__(self, vertex1, vertex2, size, color):
        super().__init__()

        # white dots needed to beautifully illustrate capacity as opacity
        whiteDots = DotSegment([vertex1, vertex2])

        point1 = vertex1.to_np_array()
        point2 = vertex2.to_np_array()

        line = Line(point1, point2)

        line.set_fill(color=color)
        line.set_stroke(width=(size * 16), color=color)

        point1 = Dot(point1).scale(vertex1.get_max_capacity())
        point2 = Dot(point2).scale(vertex2.get_max_capacity())

        point1.set_fill(color=color, opacity=vertex1.get_opacity(size))
        # point1.set_stroke(color=color, opacity=vertex2.get_opacity(size))

        point2.set_fill(color=color, opacity=vertex2.get_opacity(size))
        # point2.set_stroke(color=color, opacity=vertex2.get_opacity(size))

        self.add(line)
        self.add(whiteDots)
        self.add(point1, point2)


"""Creates a DotSegment for every vertex that is used in the flow we are animating. Needed, in order to illustrate vertices with a opacity"""


class DotSegment(Mobject):
    def __init__(self, vertices: list[Vertex]):
        super().__init__()
        for vertex in vertices:
            vertexToCreate = (
                Dot(
                    point=vertex.to_np_array(),
                )
                .scale(vertex.get_max_capacity() - 0.1)
                .set_Fill(WHITE)
            )

            self.add(vertexToCreate)


"""Only used to create the initial BackgroundGraph, which consists of a black graph and a white graph. The black graph is slightly bigger than the white graph, to create a 'border' effect"""


class BackgroundGraph(Mobject):
    def __init__(self, edges: list[Edge]):
        super().__init__()

        for edge in edges:
            blackPart = GraphSegment(
                edge.start_vertex.to_np_array(),
                edge.end_vertex.to_np_array(),
                (edge.max_capacity + 0.2),
                BLACK,
            )

            whitePart = GraphSegment(
                edge.start_vertex.to_np_array(),
                edge.end_vertex.to_np_array(),
                edge.max_capacity,
                WHITE,
            )

            self.add_to_back(blackPart)
            self.add(whitePart)


class GraphSegment(Mobject):
    def __init__(self, point1, point2, size, color):
        super().__init__()

        line = Line(point1, point2)

        line.set_fill(color=color)
        line.set_stroke(width=(size * 16), color=color)
        line.set_z(-1)

        vertex1 = Dot(point1).scale(size)
        vertex2 = Dot(point2).scale(size)

        vertex1.set_fill(color=color)
        # vertex1.set_stroke(color=color)
        vertex1.set_z(size)

        vertex2.set_fill(color=color)
        # vertex2.set_stroke(color=color)
        vertex1.set_z(size)

        self.add(line, vertex1, vertex2)


"""The ArrowGraph finds the point on the edge, where to put the two small red arrows"""


class ArrowGraph(Mobject):
    def __init__(self, edges: list[Edge]):
        super().__init__()
        for edge in edges:
            arrow = CustomArrow(
                edge.start_vertex.to_np_array(), edge.end_vertex.to_np_array()
            )
            self.add(arrow)


"""Custom-made arrow to fit the design we needed. Generated by Chat-GPT"""


class CustomArrow(Arrow):
    def __init__(self, p1: ndarray, p2: ndarray):
        midpoint = (p1 + p2) / 2
        fixed_length = 1.5
        direction_vector = normalize(p2 - p1)
        start_point = midpoint - fixed_length / 2 * direction_vector
        end_point = midpoint + fixed_length / 2 * direction_vector

        super().__init__(start_point, end_point, tip_length=0.2)
        super().set_fill(color=RED_E)
        super().set_stroke(color=RED_E)


"""Labels are added to each vertex in the graph"""


class GraphLabel(Mobject):
    def __init__(self, vertices: list[Vertex]):
        super().__init__()
        for i, vertex in enumerate(vertices):
            label = Label(vertex, str(i))
            self.add(label)


class Label(Mobject):
    def __init__(self, vertex: Vertex, label: str):
        super().__init__()
        label = Tex(label, color=BLACK).set_x(vertex.x_coord).set_y(vertex.y_coord)
        self.add(label)
